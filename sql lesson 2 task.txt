CREATE TABLE "actors" (
	"actors_id"	INTEGER NOT NULL,
	"name"	TEXT NOT NULL,
	"surname"	TEXT NOT NULL,
	"age"	INTEGER NOT NULL CHECK("age" < 100 and "age" > 4),
	"sex"	TEXT NOT NULL CHECK("sex" = 'm' OR "sex" = 'f'),
	PRIMARY KEY("actors_id" AUTOINCREMENT)
);

CREATE TABLE "directors" (
	"director_id"	INTEGER NOT NULL,
	"name"	TEXT NOT NULL,
	"surname"	TEXT NOT NULL,
	"age"	INTEGER NOT NULL CHECK("age" < 100 and "age" > 16),
	"sex"	TEXT NOT NULL CHECK("sex" = 'm' OR "sex" = 'f'),
	PRIMARY KEY("director_id" AUTOINCREMENT)
);

CREATE TABLE "movies" (
	"movie_id"	INTEGER NOT NULL,
	"name_movie"	TEXT NOT NULL,
	"release"	INTEGER NOT NULL CHECK("release" < 2025 and "release" > 1894),
	"budget"	INTEGER,
	"director_id" INTEGER,
	PRIMARY KEY("movie_id" AUTOINCREMENT)
	FOREIGN KEY (director_id)  REFERENCES directors (director_id) ON DELETE SET NULL
);

CREATE TABLE "actors_movies" (
	"actors_movies_id"	INTEGER NOT NULL,
	"movies_id"	INTEGER,
	"actors_id"	INTEGER,
	PRIMARY KEY("actors_movies_id" AUTOINCREMENT)
	FOREIGN KEY (actors_id)  REFERENCES actors (actors_id) ON DELETE SET NULL
	FOREIGN KEY (movies_id)  REFERENCES movies (movie_id) ON DELETE SET NULL
);

CREATE TABLE "Bank_accounts" (
	"bank_account_id"	INTEGER NOT NULL,
	"director_id"	INTEGER,
	"actors_id"	INTEGER,
	"account_number" INTEGER NOT NULL,
	PRIMARY KEY("bank_account_id" AUTOINCREMENT)
	FOREIGN KEY (director_id)  REFERENCES directors (director_id) ON DELETE SET NULL
	FOREIGN KEY (actors_id)  REFERENCES actors (actors_id) ON DELETE SET NULL
);

INSERT INTO actors (name, surname,age, sex) VALUES 
('Arnold' ,'Schwarzenegger', 75, 'm'),
('Bruce', 'Willis',	67,	'm'),
('Tom', 'Cruise', 60, 'm'),
('Brad', 'Pitt', 53, 'm'),
('Will', 'Smith', 54, 'm'),
('Leonardo', 'DiCaprio', 48, 'm'),
('Tom', 'Hanks', 66, 'm'),
('Johnny', 'Depp', 59, 'm'),
('Harrison', 'Ford', 80, 'm'),
('Sandra', 'Bullock', 58, 'f'),
('Halle', 'Berry', 56,	'f'),
('Julia', 'Roberts', 55, 'f'),
('Kate', 'Winslet', 47, 'f'),
('Angelina', 'Jolie', 47, 'f');

INSERT INTO directors (name, surname,age, sex) VALUES 
('James' ,'Cameron', 68, 'm'),
('Steven', 'Spilberg',	75,	'm'),
('Robert', 'Zemeckis', 70, 'm'),
('Doug', 'Liman', 57, 'm'),
('Brian', 'De Palma', 82, 'm'),
('John', 'Woo', 76, 'm'),
('Tim', 'Berton',64, 'm'),
('Jan', 'De Bont', 79, 'm'),
('Alejandro', 'Agresti', 61, 'm'),
('Garry', 'Marshal', 82, 'm'),
('Steven', 'Sodeberg', 59, 'm'),
('Michael', 'Bay', 57, 'm'),
('Barry', 'Sonnenfeld', 69, 'm'),
('Simon', 'Kinberg', 49, 'm'),
('Christopher', 'Nolan', 52, 'm'),
('Martin', 'Scorsese', 80, 'm'),
('Stanley', 'Kubrick', 70, 'm'),
('Woody', 'Allen', 87, 'm');

INSERT INTO movies (name_movie, release, budget, director_id) VALUES 
('Titanic', 1997, 200000000, 1),
('Catch me if you can', 2002, 52000000, 2),
('Forrest Gump', 1994, 55000000, 3),
('Terminator 2' , 1991, 102000000, 1),
('Mr. & Mrs. Smith', 2005, 110000000, 4),
('Indiana Jones 3', 1989, 48000000, 2),
('Mission impossible 1', 1996, 80000000, 5),
('Mission impossible 2', 2000, 125000000, 6),
('Charlie and the Chocolate Factory', 2005, 150000000, 7),
('Speed', 1994, 25000000, 8),
('Lake House', 2006, 40000000, 9),
('Pretty women', 1990, 190000000, 10),
('Ocean’s eleven', 2001, 184000000, 11),
('Larry Crowne', 2011, 30000000, NULL),
('Bad boys 1', 1995, 19000000, 12),
('Bad boys 2', 2003, 130000000, 12),
('Men in black', 1997, 90000000, 13),
('The Martian',	2015, 108000000, 14),
('Interstellar', 2014, 165000000, 15);

INSERT INTO actors_movies (movies_id, actors_id) VALUES 
(1, 6),
(1, 13),
(2, 6),
(2, 7),
(3, 7),
(4, 1),
(5, 4),
(5, 14),
(6, 9),
(7, 3),
(8, 3),
(9, 8),
(10, 10),
(11, 10),
(12, 12),
(13, 4),
(13, 12),
(14, 7),
(14, 12),
(15, 5),
(16, 5),
(17, 5),
(18, NULL),
(19, NULL);

INSERT INTO Bank_accounts (director_id, actors_id, account_number) VALUES 
(NULL, 1, 1264567),
(NULL, 2, 1296567),
(NULL, 3, 1234567),
(NULL, 4, 1294167),
(NULL, 5, 1594567),
(NULL, 6, 1794567),
(NULL, 7, 1994567),
(NULL, 8, 2294567),
(NULL, 9, 1294567),
(NULL, 10, 2297667),
(NULL, 11, 3994567),
(NULL, 12, 4294567),
(NULL, 13, 5294567),
(NULL, 14, 6294567),
(1, NULL, 7294567),
(2, NULL, 8294567),
(3, NULL, 9294567),
(4, NULL, 1294561),
(5, NULL, 1294562),
(6, NULL, 1294563),
(7, NULL, 1294564),
(8, NULL, 1294565),
(9, NULL, 1294566),
(10, NULL, 1294567),
(11, NULL, 1294568),
(12, NULL, 1294569),
(13, NULL, 1294521),
(14, NULL, 1294537),
(15, NULL, 1294547),
(16, NULL, 1294557),
(17, NULL, 1294557),
(18, NULL, 1294577);

ALTER TABLE Bank_accounts  ADD COLUMN finance INTEGER DEFAULT NULL; 

SELECT DISTINCT directors.*
FROM directors LEFT JOIN movies
ON movies.director_id = directors.director_id LIMIT 10

SELECT DISTINCT directors.*
FROM directors LEFT JOIN movies
ON movies.director_id  = directors.director_id 
WHERE movies.director_id is NULL

SELECT DISTINCT actors.*
FROM actors LEFT JOIN actors_movies                                     
ON actors.actors_id  = actors_movies.actors_id 
WHERE actors_movies.actors_id is NULL

--? где найти сборы

SELECT DISTINCT directors.*
FROM directors LEFT JOIN movies
ON movies.director_id  = directors.director_id 
WHERE movies.release < 2000

INSERT INTO movies (name_movie, release, budget, director_id) VALUES 
('Shutter Island', 2010, 80000000, 16),
('The Shining', 1980, 19000000, 17),
('Irational Man',2015, 11000000, 18),
('Die Hard', 1988, 28000000, NULL),
('Gothika', 2003, 40000000, NULL);

INSERT INTO actors_movies (movies_id, actors_id) VALUES 
(23, 2),
(24, 11);

ALTER TABLE movies  ADD COLUMN raiting REAL DEFAULT NULL;
UPDATE movies
SET raiting = CASE movie_id
	WHEN 1 THEN 7.9
	WHEN 2 THEN 8.1
	WHEN 3  THEN 8.8
	WHEN 4  THEN 8.6
	WHEN 5  THEN 6.5
	WHEN 6  THEN 8.2
	WHEN 7 THEN 7.2
	WHEN 8 THEN 6.1
	WHEN 9 THEN 6.7
	WHEN 10 THEN 7.3
	WHEN 11  THEN 6.8
	WHEN 12 THEN 7.1
	WHEN 13 THEN 7.7
	WHEN 14  THEN 6.1
	WHEN 15 THEN 6.8
	WHEN 16  THEN 6.6
	WHEN 17 THEN 7.3
	WHEN 18 THEN 8.0
	WHEN 19 THEN 8.7
	WHEN 20 THEN 8.2
	WHEN 21  THEN 8.4
	WHEN 22 THEN 6.6
	WHEN 23 THEN 8.2
	WHEN 24  THEN 5.8
END; 

SELECT DISTINCT directors.name, directors.surname, movies.name_movie
FROM directors LEFT JOIN movies
ON movies.director_id  = directors.director_id 
WHERE movies.release < 2000 AND movies.raiting < (SELECT avg(movies.raiting) FROM movies)

SELECT DISTINCT name, surname, actors_id
FROM actors
WHERE actors_id in  
(SELECT a1.actors_id
FROM actors_movies a1
JOIN actors_movies a2 ON a1.movies_id = a2.movies_id AND a1.actors_id != a2.actors_id
GROUP BY a1.actors_id
HAVING count(DISTINCT a2.actors_id) > 1)

--11

SELECT DISTINCT name, surname, director_id
FROM directors 
WHERE director_id in 
(SELECT director_id
FROM movies
GROUP BY director_id
HAVING count(movies.director_id) = 1)

SELECT DISTINCT name, surname, actors_id
FROM actors 
WHERE actors_id in 
(SELECT actors_id
FROM actors_movies
GROUP BY actors_id
HAVING count(actors_movies.actors_id) = 1)

--13